generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Tenants {
  id                      Int                       @id @default(autoincrement()) @map("id")
  nome                    String                    @map("nome")
  usuarios                Usuarios[]
  transacoes              Transacoes[]
  transacoesCartaoCredito TransacoesCartaoCredito[]
  palavrasChaveCategoria  PalavrasChaveCategoria[]

  @@map("tenants")
  Arquivos Arquivos[]
}

model Usuarios {
  id       Int     @id @default(autoincrement()) @map("id")
  nome     String  @map("nome")
  password String  @map("password")
  email    String  @unique @map("email")
  tenantId Int     @map("tenant_id")
  tenant   Tenants @relation(fields: [tenantId], references: [id])

  @@map("usuarios")
}

model Transacoes {
  id        String         @id @map("id")
  data      DateTime       @map("data")
  descricao String         @map("descricao")
  valor     Float          @map("valor")
  tipo      TipoTransacao  @map("tipo")
  banco     String         @map("banco")
  tenantId  Int            @map("tenant_id")
  categoria TipoCategoria? @default(OUTROS) @map("categoria")
  tenant    Tenants        @relation(fields: [tenantId], references: [id])

  @@map("transacoes")
}

model TransacoesCartaoCredito {
  id        String        @id @map("id")
  data      DateTime      @map("data")
  descricao String        @map("descricao")
  valor     Float         @map("valor")
  banco     String        @map("banco")
  tenantId  Int           @map("tenant_id")
  categoria TipoCategoria @default(OUTROS)
  tenant    Tenants       @relation(fields: [tenantId], references: [id])

  @@map("transacoes_cartao_credito")
}

model PalavrasChaveCategoria {
  id       Int    @id @default(autoincrement()) @map("id")
  palavra  String @map("palavra")
  tenantId Int    @map("tenant_id")

  categoria TipoCategoria
  tenant    Tenants       @relation(fields: [tenantId], references: [id])

  @@map("palavras_chave_categoria")
}

model Arquivos {
  id         String      @id @map("id")
  nome       String      @map("nome")
  conteudo   Bytes       @map("conteudo") // Armazena o arquivo bin√°rio (PDF, imagem, etc.)
  dataUpload DateTime    @default(now()) @map("data_upload")
  tipo       TipoArquivo @map("tipo")
  status     TipoStatus  @default(PENDENTE) @map("status")
  tenantId   Int         @map("tenant_id")
  tenant     Tenants     @relation(fields: [tenantId], references: [id])

  @@map("arquivos") // Nome da tabela no banco: faturas
}

model documentVectors {
  id       String                 @id @default(uuid())
  content  String
  metadata Json // Armazena metadados como JSON
  vector   Unsupported("vector")?
  

  @@map("document_vectors") // Mapeia para a tabela document_vectors
}

enum TipoStatus {
  PENDENTE
  PROCESSANDO
  CONCLUIDO
  ERRO
}

enum TipoArquivo {
  EXTRATO_BANCARIO
  FATURA_CARTAO_CREDITO
}

enum TipoTransacao {
  RECEITA
  DESPESA
}

enum TipoCategoria {
  ALIMENTACAO
  SAUDE
  TRANSPORTE
  LAZER
  EDUCACAO
  SERVICOS
  OUTROS
  PETS
  SALARIO
  INVESTIMENTOS
  CARTAO_CREDITO
  CARTAO_DEBITO
  FERIAS
  IMPOSTOS
  CONTAS
  UTILIDADES
  VIAGEM
  DOACOES
  DESPESAS_FIXAS
  DESPESAS_VARIAVEIS
  RECEITAS
  PAGAMENTO_FATURA
}
